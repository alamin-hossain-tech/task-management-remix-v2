{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "../app/root.tsx", "../app/theme/theme.ts", "../app/components/main-layout/main-layout.tsx", "../app/routes/_index.tsx", "../app/routes/about.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["// entry.server.tsx\nimport { renderToString } from \"react-dom/server\";\nimport { CacheProvider } from \"@emotion/react\";\nimport createEmotionServer from \"@emotion/server/create-instance\";\nimport { RemixServer } from \"@remix-run/react\";\nimport type { EntryContext } from \"@remix-run/node\"; // Depends on the runtime you choose\n\nimport { ServerStyleContext } from \"./context\";\nimport createEmotionCache from \"./createEmotionCache\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const cache = createEmotionCache();\n  const { extractCriticalToChunks } = createEmotionServer(cache);\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>\n  );\n\n  const chunks = extractCriticalToChunks(html);\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "// context.tsx\nimport React, { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n", "// createEmotionCache.ts\nimport createCache from \"@emotion/cache\";\n\nexport const defaultCache = createEmotionCache();\n\nexport default function createEmotionCache() {\n  return createCache({ key: \"cha\" });\n}\n", "// root.tsx\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport { ChakraProvider, cookieStorageManagerSSR } from \"@chakra-ui/react\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from \"@remix-run/react\";\nimport { MetaFunction, LinksFunction, LoaderFunction } from \"@remix-run/node\"; // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from \"./context\";\nimport theme from \"./theme/theme\";\nimport MainLayout from \"./components/main-layout/main-layout\";\n\nexport const meta: MetaFunction = () => [\n  {\n    charset: \"utf-8\",\n    title: \"New Remix App\",\n    viewport: \"width=device-width,initial-scale=1\",\n  },\n];\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    { rel: \"preconnect\", href: \"https://fonts.gstatic.com\" },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\",\n    },\n  ];\n};\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    function getColorMode(cookies: string) {\n      const match = cookies.match(\n        new RegExp(`(^| )${CHAKRA_COOKIE_COLOR_KEY}=([^;]+)`)\n      );\n      return match == null ? void 0 : match[2];\n    }\n\n    // here we can set the default color mode. If we set it to null,\n    // there's no way for us to know what is the the user's preferred theme\n    // so the cient will have to figure out and maybe there'll be a flash the first time the user visits us.\n    const DEFAULT_COLOR_MODE: \"light\" | \"dark\" | null = \"light\";\n\n    const CHAKRA_COOKIE_COLOR_KEY = \"chakra-ui-color-mode\";\n\n    let cookies = useLoaderData();\n\n    // the client get the cookies from the document\n    // because when we do a client routing, the loader can have stored an outdated value\n    if (typeof document !== \"undefined\") {\n      cookies = document.cookie;\n    }\n\n    // get and store the color mode from the cookies.\n    // It'll update the cookies if there isn't any and we have set a default value\n    let colorMode = useMemo(() => {\n      let color = getColorMode(cookies);\n\n      if (!color && DEFAULT_COLOR_MODE) {\n        cookies += ` ${CHAKRA_COOKIE_COLOR_KEY}=${DEFAULT_COLOR_MODE}`;\n        color = DEFAULT_COLOR_MODE;\n      }\n\n      return color;\n    }, [cookies]);\n\n    return (\n      <html\n        lang=\"en\"\n        {...(colorMode && {\n          \"data-theme\": colorMode,\n          style: { colorScheme: colorMode },\n        })}\n      >\n        <head\n          {...(colorMode && {\n            className: `chakra-ui-${colorMode}`,\n          })}\n        >\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(\" \")}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body\n          {...(colorMode && {\n            className: `chakra-ui-${colorMode}`,\n          })}\n        >\n          <ChakraProvider\n            colorModeManager={cookieStorageManagerSSR(cookies)}\n            theme={theme}\n          >\n            {children}\n          </ChakraProvider>\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);\n\nexport default function App() {\n  return (\n    <Document>\n      <MainLayout />\n    </Document>\n  );\n}\n\n// Typescript\n// This will return cookies\nexport const loader: LoaderFunction = async ({ request }) => {\n  // first time users will not have any cookies and you may not return\n  // undefined here, hence ?? is necessary\n  return request.headers.get(\"cookie\") ?? \"\";\n};\n", "// theme.ts\n\n// 1. import `extendTheme` function\nimport { extendTheme, type ThemeConfig } from \"@chakra-ui/react\";\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: true,\n};\n\nconst styles = {\n  global: {\n    body: {\n      borderColor: \"red\",\n    },\n  },\n};\n\n// 3. extend the theme\nconst theme = extendTheme({\n  config,\n  colors: {\n    border: \"#DBDBDB\",\n  },\n});\n\nexport default theme;\n", "import { Box, Flex, HStack, Heading, Text } from \"@chakra-ui/react\";\nimport { Outlet } from \"@remix-run/react\";\nimport React from \"react\";\n\nconst MainLayout = () => {\n  return (\n    <>\n      <Flex gap={0} position={\"relative\"}>\n        <Box\n          w={\"250px\"}\n          h={\"100dvh\"}\n          position={\"sticky\"}\n          left={0}\n          top={0}\n          borderRight={\"1px\"}\n          borderColor={\"border\"}\n          zIndex={99}\n        >\n          <HStack\n            w={\"full\"}\n            h={\"70px\"}\n            borderBottom={\"1px\"}\n            borderColor={\"border\"}\n            align={\"center\"}\n            justify={\"center\"}\n          >\n            <Heading>Logo</Heading>\n          </HStack>\n        </Box>\n        <Box w={\"full\"}>\n          <Box\n            w={\"full\"}\n            h={\"70px\"}\n            borderBottom={\"1px\"}\n            borderColor={\"border\"}\n            position={\"sticky\"}\n            left={0}\n            top={0}\n            zIndex={99}\n            bgColor={\"white\"}\n          ></Box>\n          <Outlet />\n        </Box>\n      </Flex>\n    </>\n  );\n};\n\nexport default MainLayout;\n", "import { Box, Button, useColorMode } from \"@chakra-ui/react\";\nimport type { MetaFunction } from \"@remix-run/node\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport default function Index() {\n  return <Box h={\"200vh\"}> hello world</Box>;\n}\n", "import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst About = () => {\n  return <Box color={\"brand.100\"}> this is about page</Box>;\n};\n\nexport default About;\n", "export default {'entry':{'module':'/build/entry.client-HB6OAMWV.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-BE5FCQ66.js','/build/_shared/chunk-GRSB5VYC.js','/build/_shared/chunk-4JUVF4LC.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-TBOFXUBR.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-7XO6JWZY.js','imports':['/build/_shared/chunk-FG5L427L.js','/build/_shared/chunk-NMZL6IDN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-7TEMG4RR.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/about':{'id':'routes/about','parentId':'root','path':'about','index':undefined,'caseSensitive':undefined,'module':'/build/routes/about-NXA6WBF7.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'f879fad9','hmr':{'runtime':'/build/_shared/chunk-TBOFXUBR.js','timestamp':1707151151847},'url':'/build/manifest-F879FAD9.js'};", "\nimport * as entryServer from \"/Users/al-aminhossain/Desktop/Task-Management-New-Remix-Js/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/_index.tsx\";\nimport * as route2 from \"./routes/about.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/about\": {\n      id: \"routes/about\",\n      parentId: \"root\",\n      path: \"about\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "jsxDEV", "cookies", "meta", "Box", "jsxDEV", "Box", "jsxDEV"]
}
