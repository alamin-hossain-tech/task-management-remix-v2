{
  "version": 3,
  "sources": ["../../app/root.tsx", "../../app/theme/theme.ts", "../../app/components/main-layout/main-layout.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n  import.meta.hot.lastModified = \"1707148679416.7625\";\n}\n// REMIX HMR END\n\n// root.tsx\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport { ChakraProvider, cookieStorageManagerSSR } from \"@chakra-ui/react\";\nimport { Links, LiveReload, Meta, Scripts, ScrollRestoration, useLoaderData } from \"@remix-run/react\";\n// Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from \"./context\";\nimport theme from \"./theme/theme\";\nimport MainLayout from \"./components/main-layout/main-layout\";\nexport const meta = () => [{\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\"\n}];\nexport const links = () => {\n  return [{\n    rel: \"preconnect\",\n    href: \"https://fonts.googleapis.com\"\n  }, {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }, {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\"\n  }];\n};\nconst Document = _s(withEmotionCache(_c = _s(({\n  children\n}, emotionCache) => {\n  _s();\n  const serverStyleData = useContext(ServerStyleContext);\n  const clientStyleData = useContext(ClientStyleContext);\n\n  // Only executed on client\n  useEffect(() => {\n    // re-link sheet container\n    emotionCache.sheet.container = document.head;\n    // re-inject tags\n    const tags = emotionCache.sheet.tags;\n    emotionCache.sheet.flush();\n    tags.forEach(tag => {\n      emotionCache.sheet._insertTag(tag);\n    });\n    // reset cache to reapply global styles\n    clientStyleData?.reset();\n  }, []);\n  function getColorMode(cookies) {\n    const match = cookies.match(new RegExp(`(^| )${CHAKRA_COOKIE_COLOR_KEY}=([^;]+)`));\n    return match == null ? void 0 : match[2];\n  }\n\n  // here we can set the default color mode. If we set it to null,\n  // there's no way for us to know what is the the user's preferred theme\n  // so the cient will have to figure out and maybe there'll be a flash the first time the user visits us.\n  const DEFAULT_COLOR_MODE = \"light\";\n  const CHAKRA_COOKIE_COLOR_KEY = \"chakra-ui-color-mode\";\n  let cookies = useLoaderData();\n\n  // the client get the cookies from the document\n  // because when we do a client routing, the loader can have stored an outdated value\n  if (typeof document !== \"undefined\") {\n    cookies = document.cookie;\n  }\n\n  // get and store the color mode from the cookies.\n  // It'll update the cookies if there isn't any and we have set a default value\n  let colorMode = useMemo(() => {\n    let color = getColorMode(cookies);\n    if (!color && DEFAULT_COLOR_MODE) {\n      cookies += ` ${CHAKRA_COOKIE_COLOR_KEY}=${DEFAULT_COLOR_MODE}`;\n      color = DEFAULT_COLOR_MODE;\n    }\n    return color;\n  }, [cookies]);\n  return <html lang=\"en\" {...colorMode && {\n    \"data-theme\": colorMode,\n    style: {\n      colorScheme: colorMode\n    }\n  }}>\n        <head {...colorMode && {\n      className: `chakra-ui-${colorMode}`\n    }}>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({\n        key,\n        ids,\n        css\n      }) => <style key={key} data-emotion={`${key} ${ids.join(\" \")}`} dangerouslySetInnerHTML={{\n        __html: css\n      }} />)}\n        </head>\n        <body {...colorMode && {\n      className: `chakra-ui-${colorMode}`\n    }}>\n          <ChakraProvider colorModeManager={cookieStorageManagerSSR(cookies)} theme={theme}>\n            {children}\n          </ChakraProvider>\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>;\n}, \"2Oo8RC9aPgB7opWdMzYUmSa3q3o=\", false, function () {\n  return [useLoaderData];\n})), \"2Oo8RC9aPgB7opWdMzYUmSa3q3o=\", false, function () {\n  return [useLoaderData];\n});\n_c2 = Document;\nexport default function App() {\n  return <Document>\n      <MainLayout />\n    </Document>;\n}\n\n// Typescript\n// This will return cookies\n_c3 = App;\nexport const loader = async ({\n  request\n}) => {\n  // first time users will not have any cookies and you may not return\n  // undefined here, hence ?? is necessary\n  return request.headers.get(\"cookie\") ?? \"\";\n};\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Document$withEmotionCache\");\n$RefreshReg$(_c2, \"Document\");\n$RefreshReg$(_c3, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/theme/theme.ts\"\n);\nimport.meta.hot.lastModified = \"1707150812007.8992\";\n}\n// REMIX HMR END\n\n// theme.ts\n\n// 1. import `extendTheme` function\nimport { extendTheme, type ThemeConfig } from \"@chakra-ui/react\";\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: \"light\",\n  useSystemColorMode: true,\n};\n\nconst styles = {\n  global: {\n    body: {\n      borderColor: \"red\",\n    },\n  },\n};\n\n// 3. extend the theme\nconst theme = extendTheme({\n  config,\n  colors: {\n    border: \"#DBDBDB\",\n  },\n});\n\nexport default theme;\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/main-layout/main-layout.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/main-layout/main-layout.tsx\");\n  import.meta.hot.lastModified = \"1707151151272.27\";\n}\n// REMIX HMR END\n\nimport { Box, Flex, HStack, Heading } from \"@chakra-ui/react\";\nimport { Outlet } from \"@remix-run/react\";\nimport React from \"react\";\nconst MainLayout = () => {\n  return <>\n      <Flex gap={0} position={\"relative\"}>\n        <Box w={\"250px\"} h={\"100dvh\"} position={\"sticky\"} left={0} top={0} borderRight={\"1px\"} borderColor={\"border\"} zIndex={99}>\n          <HStack w={\"full\"} h={\"70px\"} borderBottom={\"1px\"} borderColor={\"border\"} align={\"center\"} justify={\"center\"}>\n            <Heading>Logo</Heading>\n          </HStack>\n        </Box>\n        <Box w={\"full\"}>\n          <Box w={\"full\"} h={\"70px\"} borderBottom={\"1px\"} borderColor={\"border\"} position={\"sticky\"} left={0} top={0} zIndex={99} bgColor={\"white\"}></Box>\n          <Outlet />\n        </Box>\n      </Flex>\n    </>;\n};\n_c = MainLayout;\nexport default MainLayout;\nvar _c;\n$RefreshReg$(_c, \"MainLayout\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_c", "cookies", "_c2", "_c", "_c2"]
}
